//155.最小栈
class MinStack {
public:
    stack<int> Stack;
    stack<int> min;

    /** initialize your data structure here. */
    MinStack() {

    }

    void push(int x) {
        Stack.push(x);
        if(min.empty() || min.top()>=x){
            min.push(x);
        }
    }

    void pop() {
        if(Stack.top()==min.top()){
            min.pop();
        }
        Stack.pop();
    }

    int top() {
        return Stack.top();
    }

    int getMin() {
        return min.top();
    }
};

//160.相交链表
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(!headA || !headB ) return nullptr;//不能排除两个链表其实是同一个，只是两个指针不同的情况——即两个链表从头就一样
        ListNode *l1=headA, *l2=headB;
        int flag1=0,flag2=0;

        while (l1!=l2){//两链表首尾链接，只有遇到一样的节点或走到底都为NULL时才会退出
            l1=l1==NULL?headB:l1->next;
            l2=l2==NULL?headA:l2->next;
        }

        return l1;
    }
};
