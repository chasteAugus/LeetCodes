//203. 移除链表元素
class Solution {
public:
    ListNode* removeElements(ListNode* head, int val) {
        ListNode *pre, *cur=head, *s;
        ListNode header(0);
        header.next=head;
        pre=&header;

        while (cur){
            if(cur->val==val){
                pre->next=cur->next;
                s=cur;
                cur=cur->next;
                delete s;
            } else{
                pre=cur;
                cur=cur->next;
            }
            //cur=cur->next;
        }

        return header.next;
    }
};

//204.计数质数
class Solution {
public:
    /*int countPrimes(int n) {//???
        int a=0;

        for (int i = 2; i < n; ++i) {
            if(isprime(i)){
                //cout<< i << " ";
                a++;
            }
        }

        //cout << endl;

        return a;
    }

    bool isprime(int n){

        for (int i = 2; i <= sqrt(n); ++i) {
            if(n%i==0)
                return false;
        }

        return true;
    }*/

    int countPrimes(int n){//厄拉多塞筛法
        vector<bool>map(n,true);
        int res=0;

        for (int i = 2; i < n; ++i) {
            if(map[i]){
                for (int j = 2; j*i < n; ++j) {
                    map[i*j]=false;
                }

                res++;
            }
        }

        return res;
    }
};

//206.反转链表
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
//lower one
        /*if(head==NULL || head->next==NULL)
            return head;
        ListNode *pre, *cur;
        pre=head;
        cur=head->next;
        head->next=NULL;

        while (cur->next!=NULL){
            ListNode *t=pre;
            pre=cur;
            cur=cur->next;
            pre->next=t;
        }

        cur->next=pre;

        return cur;*/

//better one
        ListNode *pre = NULL;
        ListNode *cur = head;

        while (cur != NULL) {
            ListNode *nextTemp = cur->next;
            cur->next = pre;
            pre = cur;
            cur = nextTemp;
        }
        return pre;
    }
};

//237
class Solution {
public:
    void deleteNode(ListNode* node) {
        node->val=node->next->val;
        node->next=node->next->next;
    }
};

//234.回文链表
class Solution {
public:
    bool isPalindrome(ListNode* head) {//快慢指针法
        if(head==NULL || head->next==NULL)
            return true;

        ListNode *fast=head;
        ListNode *slow=head;
        ListNode *pre;
        ListNode *s=NULL;
        ListNode *temp;

        while (fast!=NULL && fast->next!=NULL){//边找中点边反转前半段链表
            pre = slow;
            slow=slow->next;
            fast=fast->next->next;
            pre->next=s;
            s=pre;
        }

        temp=slow;

        if(fast!=NULL)//考虑链表长度的奇偶性
            temp=temp->next;

        slow=pre;

        while(temp!=NULL){//比较判断回文
            if(temp->val!=slow->val) return false;
            else{
                temp=temp->next;
                slow=slow->next;
            }
        }

        return true;
    }
};

//242
class Solution {
public:
    bool isAnagram(string s, string t) {
        if(s.length()!=t.length()){
            return false;
        }

        vector <int> vector(26,0);

        for (int i = 0; i < s.length(); ++i) {
            vector[s[i]-'a']++;
            vector[t[i]-'a']--;
        }

        for(int i: vector){
            if(i!=0)
                return false;
        }

        return true;
    }
};
