//328. 奇偶链表
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if (!head || !head->next) return head;
        ListNode *odd = head, *even = head->next, *evenHead = even;//odd指向奇数串的尾巴，head指向奇数串的头部
        while (even != nullptr && even->next != nullptr) {//evenHead指向偶数串的头部，even指向偶数串的尾巴
            odd->next = even->next;
            odd = odd->next;
            even->next = odd->next;
            even = even->next;
        }
        odd->next = evenHead;//奇数串和偶数串相连
        return head;
    }
};

//344.
class Solution {
public:
    void reverseString(vector<char>& s) {
        int i=0;
        int j=s.size()-1;

        while (i<j){
            char t=s[i];
            s[i]=s[j];
            s[j]=t;
            i++;
            j--;
        }
    }
};

//350.
class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        vector<int> ans;
        vector<int>::iterator t;

        for (int i = 0; i < nums1.size(); ++i) {
            t = find(nums2.begin(), nums2.end(), nums1[i]);
            if(t!=nums2.end()){
                ans.push_back(nums1[i]);
                nums2.erase(t);
            }
        }

        return ans;
    }
};
