//104.二叉树的最大深度
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {//递归求解
public:
    int maxDepth(TreeNode* root) {
        if(root==NULL)
            return 0;
        int deepOfleft=maxDepth(root->left);
        int deepOfright=maxDepth(root->right);
        return max(deepOfleft,deepOfright)+1;
    }
};

//141. 环形链表
class Solution {
public:
    bool hasCycle(ListNode *head) {//双指针法
        if(!head || !head->next) return false;

        ListNode *fast = head;
        ListNode *slow = head;
        while(fast && fast->next) {
            fast = fast->next->next;
            slow=slow->next;
            if (fast==slow) return true;
        }
        return false;
    }
};

//142. 环形链表 II
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {//floyd算法
        if(!head || !head->next){
            return NULL;
        }

        ListNode *fast=head, *slow=head;

        while (true){//找到相遇点
            if(!fast || !fast->next) return NULL;

            fast=fast->next->next;
            slow=slow->next;
            if(fast==slow) break;
        }

        fast=head;

        while (slow!=fast){//找到入口点
            slow=slow->next;
            fast=fast->next;
        }

        return fast;
    }
};
