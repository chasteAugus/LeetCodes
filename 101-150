//104.二叉树的最大深度
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

class Solution {//递归求解
public:
    int maxDepth(TreeNode* root) {
        if(root==NULL)
            return 0;
        int deepOfleft=maxDepth(root->left);
        int deepOfright=maxDepth(root->right);
        return max(deepOfleft,deepOfright)+1;
    }
};

//141. 环形链表
class Solution {
public:
    bool hasCycle(ListNode *head) {//双指针法
        if(!head || !head->next) return false;

        ListNode *fast = head;
        ListNode *slow = head;
        while(fast && fast->next) {
            fast = fast->next->next;
            slow=slow->next;
            if (fast==slow) return true;
        }
        return false;
    }
};

//142. 环形链表 II
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {//floyd算法
        if(!head || !head->next){
            return NULL;
        }

        ListNode *fast=head, *slow=head;

        while (true){//找到相遇点
            if(!fast || !fast->next) return NULL;

            fast=fast->next->next;
            slow=slow->next;
            if(fast==slow) break;
        }

        fast=head;

        while (slow!=fast){//找到入口点
            slow=slow->next;
            fast=fast->next;
        }

        return fast;
    }
};

143. 重排链表
class Solution {//用函数会更快。。。
public:
    void reorderList(ListNode* head) {
        if(head==nullptr||head->next==nullptr){
            return;
        }
        ListNode* mid=findMid(head);
        ListNode* l2=mid->next;
        mid->next=nullptr;
        l2=reverse(l2);
        ListNode* l1=head;
        while(l1!=nullptr&&l2!=nullptr){//leetcode无法用'!'号来判断
            ListNode* next=l1->next;
            l1->next=l2;
            l2=l2->next;
            l1->next->next=next;
            l1=next;
        }
    }
private:
    ListNode* findMid(ListNode* head){
        ListNode* slow=head;
        ListNode* fast=head->next;
        while(fast!=nullptr&&fast->next!=nullptr){
            fast=fast->next->next;
            slow=slow->next;
        }
        return slow;
    }
    ListNode* reverse(ListNode* head){
        ListNode* pre=nullptr;
        ListNode* next=nullptr;
        ListNode* cur=head;
        while(cur!=nullptr){
            next=cur->next;
            cur->next=pre;
            pre=cur;
            cur=next;
        }
        return pre;
    }
};

//147. 对链表进行插入排序
法一：一般想法
class Solution {
public:
    ListNode *insertionSortList(ListNode *head) {//速度较慢，用vector会更快
        if (!head || !head->next)
            return head;

        ListNode *cur, *pre, *t;
        ListNode *hnode = new ListNode(0);//创建头节点
        hnode->next = head;
        cur = head->next;
        head->next = nullptr;

        while (cur != nullptr) {//排序
            pre = hnode;
            head = hnode->next;
            t = cur->next;
            cur->next = nullptr;//防止出现链表环

            while (head != nullptr) {
                if (cur->val < head->val) {
                    cur->next = head;
                    pre->next = cur;
                    break;
                } else {
                    head = head->next;
                    pre = pre->next;
                }
            }

            if (head == nullptr) {//防止该数据本就有序的情况出现
                pre->next = cur;
            }

            cur = t;//更新cur的值
        }

        return hnode->next;
    }
};
法二：加个尾节点、提高效率
class Solution {
    public ListNode insertionSortList(ListNode head) {
        ListNode dummy = new ListNode(Integer.MIN_VALUE);//创建头节点
        ListNode pre = dummy;
        ListNode tail = dummy;
        ListNode cur = head;
        while (cur != null) {
            if (tail.val < cur.val) {//如大于尾节点即有序，直接连接
                tail.next = cur;
                tail = cur;
                cur = cur.next;
            } else {//如小于尾节点则再从头寻找位置插入
                ListNode tmp = cur.next;
                tail.next = tmp;//使尾节点指向cur的下一个节点亦可防止循环的出现
                while (pre.next != null && pre.next.val < cur.val) pre = pre.next;
                cur.next = pre.next;
                pre.next = cur;
                pre = dummy;
                cur = tmp;
            }
        }
        return dummy.next;
    }
}
