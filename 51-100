//66
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {

        for (int i = digits.size()-1; i >=0 ; --i) {
            if(i==0 && digits[i]==9){
                digits[0]=0;
                digits.insert(digits.begin(),1);
                break;
            }
            if(digits[i]==9){
                digits[i]=0;
            }else{
                digits[i]++;
                break;
            }
        }

        return digits;
    }
};

//83.删除排序链表中的重复元素
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
    
  //初始版本      
        if(!head || !head->next)
            return head;
        ListNode *first=head;
        ListNode *second=head->next;

        while (second){
            if(first->val==second->val){
                ListNode *t=second;
                first->next=second->next;
                second=second->next;
                t->next=NULL;
            } else{
                first=first->next;
                second=second->next;
            }
        }
//更改版本
        if(!head) return head;
        ListNode *temp=head;
        
        while (temp->next){
            if(temp->val==temp->next->val){
                temp->next=temp->next->next;
            } else{
                temp=temp->next;
            }
        }
        
        return head;
    }
};

//88
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i=m+n-1;
        int j=n-1;
        int k=m-1;

        while(j>=0){
            if(k<0||nums1[k]<nums2[j]){
                nums1[i--]=nums2[j--];
            } else{
                nums1[i--]=nums1[k--];
            }
        }
    }
};
