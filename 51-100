//53.
class Solution {
public:
    int maxSubArray(vector<int> &nums) {
        int sum=0;
        int ans=INT_MIN;

        for (int num : nums){
            if(sum>0){
                sum+=num;
            } else{
                sum=num;
            }
            ans=ans>sum?ans:sum;
        }

        return ans;
    }
};

//61.旋转链表
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        if(!head || !head->next){
            return head;
        }

        ListNode *tail=head, *pre, *t;
        int len=1;

        while (tail->next){//找到尾节点
            tail=tail->next;
            len++;
        }

        tail->next=head;//首尾相连
        k=len-k%len;
        t=head;

        while (k--){//断开环路形成结果
            pre=t;
            t=t->next;
        }

        pre->next=NULL;
        head=t;
        return head;
    }
};

//66
class Solution {
public:
    vector<int> plusOne(vector<int>& digits) {

        for (int i = digits.size()-1; i >=0 ; --i) {
            if(i==0 && digits[i]==9){
                digits[0]=0;
                digits.insert(digits.begin(),1);
                break;
            }
            if(digits[i]==9){
                digits[i]=0;
            }else{
                digits[i]++;
                break;
            }
        }

        return digits;
    }
};

//70.
class Solution {
public:
    int climbStairs(int n) {
        int past, now;
        past=0;
        now=1;

        for (int i = 0; i < n; ++i) {
            now+=past;
            past=now-past;
        }

        return now;
    }
};

//82. 删除排序链表中的重复元素 II
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(!head || !head->next)
            return head;

        ListNode *pre, *cur=head, *next=head->next;
        ListNode header(0);
        header.next=head;
        int flag=0;
        pre=&header;

        while (!next){
            if(cur->val==next->val){//删除与当前节点相同的下一节点
                cur->next=next->next;
                next=next->next;
                flag=1;//标记置1
            } else{
                if(flag==0){
                    pre=cur;
                    cur=cur->next;//两指针后移
                    next=next->next;
                } else{
                    pre->next=next;//删除有过重复的节点
                    flag=0;//重置标记
                    cur=next;//两指针后移
                    next=next->next;
                }
            }
        }

        if(flag==1){
            pre->next=next;//删除最后一个有过重复的节点
        }

        return header.next;
    }
};

//83.删除排序链表中的重复元素1
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
    
  //初始版本      
        if(!head || !head->next)
            return head;
        ListNode *first=head;
        ListNode *second=head->next;

        while (second){
            if(first->val==second->val){
                ListNode *t=second;
                first->next=second->next;
                second=second->next;
                t->next=NULL;
            } else{
                first=first->next;
                second=second->next;
            }
        }
//更改版本
        if(!head) return head;
        ListNode *temp=head;
        
        while (temp->next){
            if(temp->val==temp->next->val){
                temp->next=temp->next->next;
            } else{
                temp=temp->next;
            }
        }
        
        return head;
    }
};

//86. 分隔链表
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
        if(!head || !head->next) return head;

        ListNode *header1=new ListNode(-1);
        ListNode *header2=new ListNode(-1);
        ListNode *p=head, *t1=header1, *t2=header2;

        while (p){
            if(p->val<x){
                t1->next=p;
                t1=t1->next;
            } else{
                t2->next=p;
                t2=t2->next;
            }
            p=p->next;
        }

        t1->next=header2->next;
        t2->next=NULL;//少了这一步会形成环
        head=header1->next;
        return head;
    }
};

//88
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i=m+n-1;
        int j=n-1;
        int k=m-1;

        while(j>=0){
            if(k<0||nums1[k]<nums2[j]){
                nums1[i--]=nums2[j--];
            } else{
                nums1[i--]=nums1[k--];
            }
        }
    }
};
